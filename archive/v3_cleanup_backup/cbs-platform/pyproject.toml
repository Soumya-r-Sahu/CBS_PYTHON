# CBS Platform V2.0 - Core Dependencies

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cbs-platform"
version = "2.0.0"
description = "Next-Generation Scalable Core Banking System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CBS Platform Team", email = "team@cbsplatform.com"}
]
keywords = ["banking", "fintech", "core-banking", "microservices", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.11"

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "psycopg2-binary>=2.9.0",  # PostgreSQL sync driver
    
    # Redis and Caching
    "redis>=5.0.0",
    "hiredis>=2.2.0",  # Fast Redis client
    
    # Message Queue and Events
    "kafka-python>=2.0.0",
    "aiokafka>=0.10.0",  # Async Kafka client
    "celery>=5.3.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[argon2]>=1.7.0",
    "python-multipart>=0.0.6",  # Form data parsing
    "cryptography>=41.0.0",
    
    # HTTP Client
    "httpx>=0.25.0",  # Async HTTP client
    "requests>=2.31.0",  # Sync HTTP client
    
    # Data Processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "openpyxl>=3.1.0",  # Excel file processing
    
    # Monitoring and Observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-exporter-jaeger>=1.21.0",
    
    # Configuration
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",
    
    # Validation and Utilities
    "email-validator>=2.1.0",
    "phonenumbers>=8.13.0",
    "python-dateutil>=2.8.0",
    
    # PDF and Reporting
    "reportlab>=4.0.0",
    "matplotlib>=3.8.0",
    
    # Development and Testing (optional)
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.0",  # Security linting
    "safety>=2.3.0",  # Dependency vulnerability scanning
]

# Production dependencies
prod = [
    "gunicorn>=21.2.0",
    "gevent>=23.9.0",  # Async worker for Gunicorn
]

# Machine Learning (optional)
ml = [
    "scikit-learn>=1.3.0",
    "joblib>=1.3.0",
    "xgboost>=2.0.0",  # For fraud detection
]

# Cloud services
cloud = [
    "boto3>=1.34.0",  # AWS
    "google-cloud-storage>=2.10.0",  # GCP
    "azure-storage-blob>=12.19.0",  # Azure
]

# All optional dependencies
all = [
    "cbs-platform[dev,prod,ml,cloud]"
]

[project.urls]
Homepage = "https://github.com/your-org/cbs-platform"
Documentation = "https://docs.cbsplatform.com"
Repository = "https://github.com/your-org/cbs-platform"
Issues = "https://github.com/your-org/cbs-platform/issues"

[project.scripts]
cbs-cli = "tools.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["platform*", "services*", "applications*", "tools*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql", "*.md"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "redis.*",
    "prometheus_client.*",
    "reportlab.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["platform", "services", "applications"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
